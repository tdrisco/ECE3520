let os1 = [1.;-1.;1.;-1.];;
val os1 : float list = [1.; -1.; 1.; -1.]

let os2 = [-1.;-1.;1.;-1.];;
val os2 : float list = [-1.; -1.; 1.; -1.]

let os3 = [-1.;-1.;1.;1.];;
val os3 : float list = [-1.; -1.; 1.; 1.]

let os4 = [-1.;-1.;1.;-1.;1.];;
val os4 : float list = [-1.; -1.; 1.; -1.; 1.]


let w1 = hopTrain([os1]);;
val w1 : float list list =
  [[0.; -1.; 1.; -1.]; [-1.; 0.; -1.; 1.]; [1.; -1.; 0.; -1.];
   [-1.; 1.; -1.; 0.]]

let w2 = hopTrain([os2]);;
val w2 : float list list =
  [[0.; 1.; -1.; 1.]; [1.; 0.; -1.; 1.]; [-1.; -1.; 0.; -1.];
   [1.; 1.; -1.; 0.]]

let w3 = hopTrain([os3]);;
val w3 : float list list =
  [[0.; 1.; -1.; -1.]; [1.; 0.; -1.; -1.]; [-1.; -1.; 0.; 1.];
   [-1.; -1.; 1.; 0.]]


nextState(os2,w2);;
- : float list = [-1.; -1.; 1.; -1.]
nextState(os3,w3);;
- : float list = [-1.; -1.; 1.; 1.]


updateN([-1.;-1.;-1.],[[0.0;-1.0;-1.0];[-1.0;0.0;-1.0];[-1.0;-1.0;0.0]],2);;
- : float list = [-1.; -1.; -1.]
updateN([-1.;-1.;-1.],[[0.0;-1.0;-1.0];[-1.0;0.0;-1.0];[-1.0;-1.0;0.0]],3);;
- : float list = [1.; 1.; 1.]


findsEquilibrium(os1,w1,5);;
- : bool = true
findsEquilibrium([-1.;-1.;-1.],[[0.0;-1.0;-1.0];[-1.0;0.0;-1.0];[-1.0;-1.0;0.0]],3);;
- : bool = false


energy(os2,w2);;
- : float = -6.
energy([-1.;-1.;-1.],[[0.0;-1.0;-1.0];[-1.0;0.0;-1.0];[-1.0;-1.0;0.0]]);;
- : float = 3.


hopTrainAState(os4);;
- : float list list =
[[0.; 1.; -1.; 1.; -1.]; [1.; 0.; -1.; 1.; -1.]; [-1.; -1.; 0.; -1.; 1.];
 [1.; 1.; -1.; 0.; -1.]; [-1.; -1.; 1.; -1.; 0.]]
hopTrainAState([-1.;-1.;-1.]);;
- : float list list = [[0.; 1.; 1.]; [1.; 0.; 1.]; [1.; 1.; 0.]]

hopTrain([os1;os3]);;
- : float list list =
[[0.; 0.; 0.; -2.]; [0.; 0.; -2.; 0.]; [0.; -2.; 0.; 0.]; [-2.; 0.; 0.; 0.]]
hopTrain([[-1.;-1.;-1.]]);;
- : float list list = [[0.; 1.; 1.]; [1.; 0.; 1.]; [1.; 1.; 0.]]

